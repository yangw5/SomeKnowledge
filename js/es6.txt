1：es6:
	*块级作用域（全局作用域 函数作用域 变量提升 暂时性死区 ），let const涉及到块级作用域。作用：防止内存泄露，防止内层变量覆盖外层变量。
	const并不是变量的值不能变动，而是指向变量的内存地址所保存的数据不得变动。简单数据类型和复合数据类型是不同的表现形式。

	*结构赋值,解析结构（模式匹配，数组的解构赋值，对于 有Iterator 接口都可以进行数组的解构赋值 默认值 按顺序）（对象的解构赋值  注意代码块）（字符串的解构赋值）

	字符串:Unicode表示法，字符串拼接，中间添加变量 用 ` ${ xxx }  `  即可，${主体}，其中主体可以是表达式、运算、对象属性还可以是函数，若是字符串将直接输出该字符串。for..of    for...in ...   includes(); startsWith();endsWith() repeat(number) padStart padEnd trim(trimStart()和trimEnd())
	
	正则表达：RegExp 构造函数，字符串对象共有 4 个方法，可以使用正则表达式：match()、replace()、search()和split()。	
	
	数值：Number.parseInt(), Number.parseFloat() Number.isInteger() isNaN 

	函数：函数调用： 函数名`参数`  箭头函数 定义函数时设置初始值 () =>{} 
	没有this,this指向父级 无法用call/apply/bind来改变this指向,this在严格模式下也不会指向window,1、箭头函数没有this，函数内部的this来自于父级最近的非箭头函数，并且不能改变this的指向。 2、箭头函数没有super 3、箭头函数没有arguments 4、箭头函数没有new.target绑定。 5、不能使用new 6、没有原型 7、不支持重复的命名参数。 函数默认参数(x=10,...)

	数组的扩展：扩展(展开)运算符：...     函数，数组，字符串接口对象都可使用。
	数组方法：
		Array.from(对象，各项改动规则)   对象：①类数组对象②实现Iterator接口的对象
		Array.of（数据1,数据2,...）数据转化为对象
		Array.copyWithin()截取复制  
		 find(规则)、findIndex(规则) 这里的规则是一个回调函数，找到了就返回这个数组项/索引，找不到返回undefined/-1
		fill(被填充数据，起始位置，结束位置)
		for...of遍历数组的键、值、以及各项键值对信息 keys()  values()
entries()
	对象的扩展：对象可直接写函数。属性名/方法名：可用中括号加表达式的方式 方法的name属性   object.is()比较    object.assign()对象合并...

	Symbol函数: 原始数据类型Symbol，表示独一无二的，这样就从根本上防止属性名的冲突

	Set和Map数据结构:Map和Set都叫做集合,Set常被用来检查对象中是否存在某个键名，Map集合常被用来获取已存的信息。 
	Set 本身是一个构造函数，用来生成 Set 数据结构。它类似于数组，但是成员的值都是唯一的，没有重复的值。
	WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。首先，WeakSet 的成员只能是对象，而不能是其他类型的值。WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，

	JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构）
	ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。object 结构提供了“字符串―值”的对应，Map 结构提供了“值―值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。
	WeakMap结构与Map结构类似，也是用于生成键值对的集合。WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。

	Iterator:遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。

	Proxy代理:创建对象的拦截器，用于修改某些操作的默认行为，API
	Reflect反射：13个静态方法。API

	Generator 函数是 ES6 提供的一种异步编程解决方案，形式上：Generator 函数是一个普通函数，但是有两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）。 数据类型
	Generator函数补充:只有执行a().next()，函数内部的语句才会执行一次，每调用一次next()函数执行一次内部函数。ext()函数有一个可选参数，用来表示上一次yield表达式值。(value ,done   done和value。value是你获得的值，done用来表明你的generator是否已经停止提供值)

	Promise---异步：
	async函数：async函数会返回一个Promise对象，自然能够调用其方法：
promise.then(success()).catch(error()).finally(function(){});Generator的语法糖。
	Iterator接口:
	for...in循环：只能获取对象的键名;for...of循环：可以获得键值，只返回具有数字索引的属性（键或值）

	class：(对象语法糖)继承：extends关键字 ,方法写在内部,不要用箭头函数,属性可以是变量,构造函数(constructor(){
	super()
})

	模块化：暴露：module.exports 对象...    获取：require  

	垃圾回收机制：应用计数 和 标记清除。内存泄露：不在用的内存没有及时的被释放


相等is
合并拷贝：assign(浅拷贝)
对象的简介属性表示   filter（移除不符合的项）   concat() 方法用于连接两个或多个数组。 key()返回键名数组 assign

前端sdk  JS"注入"实现的一大堆API接口
raven.js（性能监测和告警的解决方案） captureExceptio对错误拦截处理与	sentry一起使用
（sentry的Raven.js外，还有腾讯的badjs，淘宝的JSTracker，阿里巴巴的FdSafe，支付宝的saijs等）
axios: 引入，
new FormData()

优化:缓存与懒加载
xss:跨站脚本攻击
	
http://localhost:3006/#/app/material/variety/info/163193?configType=variety

http://localhost:3006/#/app/material/videoringtones/1
http://test.karakal.com.cn:18089/mls/mzkweb/index.html#/app/material/album/1115340737

