Zepto、Swiper、fullPage  Gulp
----------------------------------
hook函数（钩子函数）：在全部函数函数执行前，钩住自己感兴趣的函数
在组件生命周期中（分为 Mounting Updating Unmounting）各有自己的钩子函数（多个）
----------------------
node   stream(流)
	流是一种抽象的接口，node中很多对象都对它进行了实现。
	流可用于传递数据
	流可以把文件资源拆分成小块，一块一块的运输

	1，Readable 可读流
	2，Writable 可写流
	3，Duplex 可读可写流
	4，Transform 在读写过程中可以修改和变换数据的Duplex流
===============
gulp
	gulp 基于流的自动化构建工具  是用代码方式来写打包脚本，并且代码采用流式的写法，只抽象出了gulp.src, gulp.pipe, gulp.dest, gulp.watch 接口,运用相当简单。经尝试，使用gulp的代码量能比grunt少一半左右。

	gulpfile.js --> 	gulp.task()   定义任务，gulp.task(name[, deps], fn)

			gulp.src()   gulp.src(globs[, options])  来获取流的,内容不是原始的文件流，而是一个虚拟文件对象流(Vinyl files),通过stream的   pipe()  方法把流导入到你想要的地方，这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息
			
			gulp.dest()   gulp.dest(path[,options]) 写文件的,传入的路径参数与最终生成的文件的关系,给gulp.dest()传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，

			gulp.watch()    gulp.watch(glob[, opts], tasks)  监视文件的变化


	gulp插件
-------------
grunt
	grunt 任务执行者，运用配置的思想来写打包脚本，一切皆配置，比较多的配置项，诸如option,src,dest等等。而且不同的插件可能会有自己扩展字段，导致认知成本的提高，运用的时候要搞懂各种插件的配置规则。

		grunt.initConfig concat...
---------------
Webpack 
	Webpack是一个打包模块化 JavaScript 的工具



-----------------------
统筹：
	官方对webpack的定位是模块打包器，而gulp/grunt属于构建工具。虽然webpack可以代替gulp的一些功能，但是很明显webpack和gulp/grunt不是一个职能的工具。webpack官方中给出了webpack with gulp/grunt的说明，两者可以配合共同服务于一个项目的。

相同点：
	都可用于项目打包，文件压缩，文件监测等功能。
不同点：
	两种工具的侧重点不同，webpack主要侧重于模块的打包，适合于单页面的项目，开发中的所有资源（图片、js文件、css文件等）都看成模块，通过loader（加载器）和plugins（插件）对资源进行处理，打包成符合生产环境部署的前端资源。gulp侧重于前端开发的工作流程，通过配置一系列的task，如less预编译等，然后定义执行顺序，来让gulp执行这些task，从而构建项目的整个前端开发流程。